e
ub_r <- Recommender(getData(e, "train"), method="UBCF", param=list(method="cosine", nn=50))
p_r <- Recommender(getData(e, "train"), method="POPULAR", param=list(method="cosine", nn=50))
ib_r <- Recommender(getData(e, "train"), method="IBCF", param=list(method="cosine", nn=50))
svd_r <- Recommender(getData(e, "train"), method="SVD", param=list(method="cosine", nn=50))
# Compute predicted ratings for the known part of the test data  (10 items for each
# user) using the two algorithms.
p_p <- predict(p_r, getData(e, "known"), type="ratings")
ib_p <- predict(ib_r, getData(e, "known"), type="ratings")
ub_p <- predict(ub_r, getData(e, "known"), type="ratings")
svd_p <- predict(svd_r, getData(e, "known"), type = "ratings")
hybrid_r <- (0.6 * as(p_p, "matrix") + 0.4 * as(ib_p, "matrix") + 0.0 * as(ub_p, "matrix") )
hybrid_r_rrm <- as(hybrid_r, "realRatingMatrix")
hybrid_p <- Recommender(hybrid_r_rrm, method="UBCF", param=list(method="cosine", nn=50))
hybrid_p <- predict(hybrid_p, getData(e, "known"), type="ratings")
cascade_r_rrm <- as(as(ub_p, "matrix"), "realRatingMatrix")
cascade_r <- Recommender(cascade_r_rrm, method="IBCF", param=list(method="cosine", nn=50))
cascade_p <- predict(cascade_r, getData(e, "known"), type="ratings")
error <- rbind(
POPULAR = calcPredictionAccuracy(p_p, getData(e, "unknown")),
ib = calcPredictionAccuracy(ib_p, getData(e, "unknown")),
#svd = calcPredictionAccuracy(svd_p, getData(e, "unknown")),
hybrid = calcPredictionAccuracy(hybrid_p, getData(e, "unknown")),
CASCADE = calcPredictionAccuracy(cascade_p, getData(e, "unknown"))
)
error
plot(cascade_results, annotate=TRUE)
plot(p_results, annotate=TRUE)
plot(svd_results, annotate=TRUE)
plot(ib_results, annotate=TRUE)
plot(cascade_results, annotate=TRUE)
# Define UI
ui <- fluidPage(
titlePanel("Music Recommendation System"),
sidebarLayout(
sidebarPanel(
selectInput("user", "Select User:", choices = names(Myrecommendations))
),
mainPanel(
h3("Top 3 Recommended Artists"),
verbatimTextOutput("recommendations"),
h3("Evaluation Metrics"),
tableOutput("metrics"),
h3("ROC Curve"),
plotOutput("rocCurve")
)
)
)
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Music Recommendation System"),
sidebarLayout(
sidebarPanel(
selectInput("user", "Select User:", choices = names(Myrecommendations))
),
mainPanel(
h3("Top 3 Recommended Artists"),
verbatimTextOutput("recommendations"),
h3("Evaluation Metrics"),
tableOutput("metrics"),
h3("ROC Curve"),
plotOutput("rocCurve")
)
)
)
# Define Server
server <- function(input, output) {
output$recommendations <- renderPrint({
Myrecommendations[[input$user]]
})
output$metrics <- renderTable({
data.frame(Metric = names(error), Value = unlist(error))
})
output$rocCurve <- renderPlot({
results <- evaluate(e, method="POPULAR", type = "topNList", n=c(1,3,5,10,15,20))
plot(results, "prec/rec", annotate = TRUE)
})
}
# Run App
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Music Recommendation System"),
sidebarLayout(
sidebarPanel(
selectInput("user", "Select User:", choices = names(Myrecommendations))
),
mainPanel(
h3("Top 3 Recommended Artists"),
verbatimTextOutput("recommendations"),
h3("Evaluation Metrics"),
tableOutput("metrics"),
h3("ROC Curve"),
plotOutput("rocCurve")
)
)
)
# Define Server
server <- function(input, output) {
output$recommendations <- renderPrint({
Myrecommendations[[input$user]]
})
output$metrics <- renderTable({
data.frame(Metric = names(error), Value = unlist(error))
})
output$rocCurve <- renderPlot({
results <- evaluate(e, method="POPULAR", type = "topNList", n=c(1,3,5,10,15,20))
plot(results, annotate = TRUE)
})
}
# Run App
shinyApp(ui = ui, server = server)
# Run App
shinyApp(ui = ui, server = server)
# Run App
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
titlePanel("Music Recommendation System"),
sidebarLayout(
sidebarPanel(
selectInput("user", "Select User:", choices = names(Myrecommendations))
),
mainPanel(
h3("Top 5 Recommended Artists"),
verbatimTextOutput("recommendations"),
#h3("Evaluation Metrics"),
#tableOutput("metrics"),
h3("ROC Curve"),
plotOutput("rocCurve")
)
)
)
# Define Server
server <- function(input, output) {
output$recommendations <- renderPrint({
Myrecommendations[[input$user]]
})
#output$metrics <- renderTable({
#data.frame(Metric = names(error), Value = unlist(error))
#})
output$rocCurve <- renderPlot({
results <- evaluate(e, method="POPULAR", type = "topNList", n=c(1,3,5,10,15,20))
plot(results, annotate = TRUE)
})
}
# Run App
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
titlePanel("Music Recommendation System"),
sidebarLayout(
sidebarPanel(
selectInput("user", "Select User:", choices = names(Myrecommendations)),
actionButton("evaluate", "Select")
),
mainPanel(
h3("Top 5 Recommended Artists"),
verbatimTextOutput("recommendations"),
h3("Evaluation Metrics"),
tableOutput("metrics"),
h3("ROC Curve"),
plotOutput("rocCurve")
)
)
)
# Define Server
server <- function(input, output) {
output$recommendations <- renderPrint({
Myrecommendations[[input$user]]
})
observeEvent(input$evaluate, {
# Evaluate Model
e <- evaluationScheme(r, method="cross", k=4, given=10, goodRating=4)
p_p <- predict(rr, getData(e, "known"), type="ratings")
error <- calcPredictionAccuracy(p_p, getData(e, "unknown"))
output$metrics <- renderTable({
data.frame(Metric = names(error), Value = unlist(error))
})
output$rocCurve <- renderPlot({
results <- evaluate(e, method="POPULAR", type = "topNList", n=c(1,3,5,10,15,20))
plot(results, annotate = TRUE)
})
})
}
# Run App
shinyApp(ui = ui, server = server)
# Run App
shinyApp(ui = ui, server = server)
# Define Server
server <- function(input, output) {
output$recommendations <- renderPrint({
Myrecommendations[[input$user]]
})
observeEvent(input$evaluate, {
# Evaluate Model
e <- evaluationScheme(r, method="cross", k=4, given=10, goodRating=1.2)
p_p <- predict(rr, getData(e, "known"), type="ratings")
error <- rbind(
POPULAR = calcPredictionAccuracy(p_p, getData(e, "unknown")),
ib = calcPredictionAccuracy(ib_p, getData(e, "unknown")),
#svd = calcPredictionAccuracy(svd_p, getData(e, "unknown")),
hybrid = calcPredictionAccuracy(hybrid_p, getData(e, "unknown")),
CASCADE = calcPredictionAccuracy(cascade_p, getData(e, "unknown"))
)
output$metrics <- renderTable({
data.frame(Metric = names(error), Value = unlist(error))
})
output$rocCurve <- renderPlot({
results <- evaluate(e, method="POPULAR", type = "topNList", n=c(1,3,5,10,15,20))
plot(results, annotate = TRUE)
})
})
}
# Define UI
ui <- fluidPage(
titlePanel("Music Recommendation System"),
sidebarLayout(
sidebarPanel(
selectInput("user", "Select User:", choices = names(Myrecommendations)),
actionButton("evaluate", "Select")
),
mainPanel(
h3("Top 5 Recommended Artists"),
verbatimTextOutput("recommendations"),
h3("Evaluation Metrics"),
tableOutput("metrics"),
h3("ROC Curve"),
plotOutput("rocCurve")
)
)
)
# Define Server
server <- function(input, output) {
output$recommendations <- renderPrint({
Myrecommendations[[input$user]]
})
observeEvent(input$evaluate, {
# Evaluate Model
e <- evaluationScheme(r, method="cross", k=4, given=10, goodRating=1.2)
p_p <- predict(rr, getData(e, "known"), type="ratings")
error <- rbind(
POPULAR = calcPredictionAccuracy(p_p, getData(e, "unknown")),
ib = calcPredictionAccuracy(ib_p, getData(e, "unknown")),
#svd = calcPredictionAccuracy(svd_p, getData(e, "unknown")),
hybrid = calcPredictionAccuracy(hybrid_p, getData(e, "unknown")),
CASCADE = calcPredictionAccuracy(cascade_p, getData(e, "unknown"))
)
output$metrics <- renderTable({
data.frame(Metric = names(error), Value = unlist(error))
})
output$rocCurve <- renderPlot({
results <- evaluate(e, method="POPULAR", type = "topNList", n=c(1,3,5,10,15,20))
plot(results, annotate = TRUE)
})
})
}
# Run App
shinyApp(ui = ui, server = server)
# Define Server
server <- function(input, output) {
output$recommendations <- renderPrint({
Myrecommendations[[input$user]]
})
observeEvent(input$evaluate, {
# Evaluate Model
e <- evaluationScheme(r, method="cross", k=4, given=10, goodRating=1.2)
p_p <- predict(rr, getData(e, "known"), type="ratings")
error <- calcPredictionAccuracy(p_p, getData(e, "unknown"))
output$metrics <- renderTable({
data.frame(Metric = names(error), Value = unlist(error))
})
output$rocCurve <- renderPlot({
results <- evaluate(e, method="POPULAR", type = "topNList", n=c(1,3,5,10,15,20))
plot(results, annotate = TRUE)
})
})
}
# Run App
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
titlePanel("Music Recommendation System"),
sidebarLayout(
sidebarPanel(
selectInput("user", "Select User:", choices = names(Myrecommendations)),
actionButton("evaluate", "Select")
),
mainPanel(
h3("Top 5 Recommended Artists"),
verbatimTextOutput("recommendations"),
h3("Evaluation Metrics"),
tableOutput("metrics"),
h3("ROC Curve"),
plotOutput("rocCurve")
)
)
)
# Define Server
server <- function(input, output) {
output$recommendations <- renderPrint({
Myrecommendations[[input$user]]
})
observeEvent(input$evaluate, {
# Evaluate Model
e <- evaluationScheme(r, method="cross", k=4, given=10, goodRating=1.2)
p_p <- predict(p_r, getData(e, "known"), type="ratings") #POPULAR
ib_p <- predict(ib_r, getData(e, "known"), type="ratings") #IBCF
error <- calcPredictionAccuracy(p_p, getData(e, "unknown"))
output$metrics <- renderTable({
data.frame(Metric = names(error), Value = unlist(error))
})
output$rocCurve <- renderPlot({
results <- evaluate(e, method="POPULAR", type = "topNList", n=c(1,3,5,10,15,20))
plot(results, annotate = TRUE)
})
})
}
# Run App
shinyApp(ui = ui, server = server)
# Define Server
server <- function(input, output) {
output$recommendations <- renderPrint({
Myrecommendations[[input$user]]
})
observeEvent(input$evaluate, {
# Evaluate Model
e <- evaluationScheme(r, method="cross", k=4, given=10, goodRating=1.2)
p_p <- predict(p_r, getData(e, "known"), type="ratings") #POPULAR
ib_p <- predict(ib_r, getData(e, "known"), type="ratings") #IBCF
error <- calcPredictionAccuracy(ib_p, getData(e, "unknown"))
output$metrics <- renderTable({
data.frame(Metric = names(error), Value = unlist(error))
})
output$rocCurve <- renderPlot({
results <- evaluate(e, method="POPULAR", type = "topNList", n=c(1,3,5,10,15,20))
plot(results, annotate = TRUE)
})
})
}
# Run App
shinyApp(ui = ui, server = server)
# We create a recommender which generates recommendations solely on the popularity of items (songs)
# Create a recommender from the first 1470 users
rr <- Recommender(r[1:600], method = "IBCF")
# Obtain information about the model
names(getModel(rr))
getModel(rr)
# Recommendations in the form of an object of class TopNList
# We create top-5 recommendation lists for 8 users who were not used to learn the model.
recom <- predict(rr, r[600:788], n=5)
recom
recom@items
recom@ratings
# Define UI
ui <- fluidPage(
titlePanel("Music Recommendation System"),
sidebarLayout(
sidebarPanel(
selectInput("user", "Select User:", choices = names(Myrecommendations)),
actionButton("evaluate", "Select")
),
mainPanel(
h3("Top 5 Recommended Artists"),
verbatimTextOutput("recommendations"),
h3("Evaluation Metrics"),
tableOutput("metrics"),
h3("ROC Curve"),
plotOutput("rocCurve")
)
)
)
# Define Server
server <- function(input, output) {
output$recommendations <- renderPrint({
Myrecommendations[[input$user]]
})
observeEvent(input$evaluate, {
# Evaluate Model
e <- evaluationScheme(r, method="cross", k=4, given=10, goodRating=1.2)
p_p <- predict(p_r, getData(e, "known"), type="ratings") #POPULAR
ib_p <- predict(ib_r, getData(e, "known"), type="ratings") #IBCF
error <- calcPredictionAccuracy(ib_p, getData(e, "unknown"))
output$metrics <- renderTable({
data.frame(Metric = names(error), Value = unlist(error))
})
output$rocCurve <- renderPlot({
results <- evaluate(e, method="IBCF", type = "topNList", n=c(1,3,5,10,15,20))
plot(results, annotate = TRUE)
})
})
}
# Run App
shinyApp(ui = ui, server = server)
# Run App
shinyApp(ui = ui, server = server)
error <- rbind(
POPULAR = calcPredictionAccuracy(p_p, getData(e, "unknown")),
ib = calcPredictionAccuracy(ib_p, getData(e, "unknown")),
#svd = calcPredictionAccuracy(svd_p, getData(e, "unknown")),
hybrid = calcPredictionAccuracy(hybrid_p, getData(e, "unknown")),
CASCADE = calcPredictionAccuracy(cascade_p, getData(e, "unknown"))
)
error
# Evaluation of a top-N recommender algorithm
#e <- evaluationScheme(r, method="split", train=0.8, given=10, goodRating=1.2)
e <- evaluationScheme(r, method="cross", k=4, given=10, goodRating=1.2)
e
ub_r <- Recommender(getData(e, "train"), method="UBCF", param=list(method="cosine", nn=50))
p_r <- Recommender(getData(e, "train"), method="POPULAR", param=list(method="cosine", nn=50))
ib_r <- Recommender(getData(e, "train"), method="IBCF", param=list(method="cosine", nn=50))
svd_r <- Recommender(getData(e, "train"), method="SVD", param=list(method="cosine", nn=50))
# Compute predicted ratings for the known part of the test data  (10 items for each
# user) using the two algorithms.
p_p <- predict(p_r, getData(e, "known"), type="ratings")
ib_p <- predict(ib_r, getData(e, "known"), type="ratings")
ub_p <- predict(ub_r, getData(e, "known"), type="ratings")
svd_p <- predict(svd_r, getData(e, "known"), type = "ratings")
hybrid_r <- (0.6 * as(p_p, "matrix") + 0.4 * as(ib_p, "matrix") + 0.0 * as(ub_p, "matrix") )
hybrid_r_rrm <- as(hybrid_r, "realRatingMatrix")
hybrid_p <- Recommender(hybrid_r_rrm, method="UBCF", param=list(method="cosine", nn=50))
hybrid_p <- predict(hybrid_p, getData(e, "known"), type="ratings")
cascade_r_rrm <- as(as(ub_p, "matrix"), "realRatingMatrix")
cascade_r <- Recommender(cascade_r_rrm, method="IBCF", param=list(method="cosine", nn=50))
cascade_p <- predict(cascade_r, getData(e, "known"), type="ratings")
error <- rbind(
POPULAR = calcPredictionAccuracy(p_p, getData(e, "unknown")),
ib = calcPredictionAccuracy(ib_p, getData(e, "unknown")),
#svd = calcPredictionAccuracy(svd_p, getData(e, "unknown")),
hybrid = calcPredictionAccuracy(hybrid_p, getData(e, "unknown")),
CASCADE = calcPredictionAccuracy(cascade_p, getData(e, "unknown"))
)
error
# Evaluation of a top-N recommender algorithm
#e <- evaluationScheme(r, method="split", train=0.8, given=10, goodRating=1.2)
set.seed(100)
e <- evaluationScheme(r, method="cross", k=4, given=10, goodRating=1.2)
# Evaluation of a top-N recommender algorithm
#e <- evaluationScheme(r, method="split", train=0.8, given=10, goodRating=1.2)
set.seed(100)
e <- evaluationScheme(r, method="cross", k=4, given=10, goodRating=1.2)
e
ub_r <- Recommender(getData(e, "train"), method="UBCF", param=list(method="cosine", nn=50))
p_r <- Recommender(getData(e, "train"), method="POPULAR", param=list(method="cosine", nn=50))
ib_r <- Recommender(getData(e, "train"), method="IBCF", param=list(method="cosine", nn=50))
svd_r <- Recommender(getData(e, "train"), method="SVD", param=list(method="cosine", nn=50))
# Compute predicted ratings for the known part of the test data  (10 items for each
# user) using the two algorithms.
p_p <- predict(p_r, getData(e, "known"), type="ratings")
ib_p <- predict(ib_r, getData(e, "known"), type="ratings")
ub_p <- predict(ub_r, getData(e, "known"), type="ratings")
svd_p <- predict(svd_r, getData(e, "known"), type = "ratings")
hybrid_r <- (0.6 * as(p_p, "matrix") + 0.4 * as(ib_p, "matrix") + 0.0 * as(ub_p, "matrix") )
hybrid_r_rrm <- as(hybrid_r, "realRatingMatrix")
hybrid_p <- Recommender(hybrid_r_rrm, method="UBCF", param=list(method="cosine", nn=50))
hybrid_p <- predict(hybrid_p, getData(e, "known"), type="ratings")
cascade_r_rrm <- as(as(ub_p, "matrix"), "realRatingMatrix")
cascade_r <- Recommender(cascade_r_rrm, method="IBCF", param=list(method="cosine", nn=50))
cascade_p <- predict(cascade_r, getData(e, "known"), type="ratings")
error <- rbind(
POPULAR = calcPredictionAccuracy(p_p, getData(e, "unknown")),
ib = calcPredictionAccuracy(ib_p, getData(e, "unknown")),
#svd = calcPredictionAccuracy(svd_p, getData(e, "unknown")),
hybrid = calcPredictionAccuracy(hybrid_p, getData(e, "unknown")),
CASCADE = calcPredictionAccuracy(cascade_p, getData(e, "unknown"))
)
error
# Evaluation of a top-N recommender algorithm
#e <- evaluationScheme(r, method="split", train=0.8, given=10, goodRating=1.2)
set.seed(100)
e <- evaluationScheme(r, method="cross", k=4, given=10, goodRating=1.2)
e
ub_r <- Recommender(getData(e, "train"), method="UBCF", param=list(method="cosine", nn=50))
p_r <- Recommender(getData(e, "train"), method="POPULAR", param=list(method="cosine", nn=50))
ib_r <- Recommender(getData(e, "train"), method="IBCF", param=list(method="cosine", nn=50))
svd_r <- Recommender(getData(e, "train"), method="SVD", param=list(method="cosine", nn=50))
# Compute predicted ratings for the known part of the test data  (10 items for each
# user) using the two algorithms.
p_p <- predict(p_r, getData(e, "known"), type="ratings")
ib_p <- predict(ib_r, getData(e, "known"), type="ratings")
ub_p <- predict(ub_r, getData(e, "known"), type="ratings")
svd_p <- predict(svd_r, getData(e, "known"), type = "ratings")
hybrid_r <- (0.6 * as(p_p, "matrix") + 0.4 * as(ib_p, "matrix") + 0.0 * as(ub_p, "matrix") )
hybrid_r_rrm <- as(hybrid_r, "realRatingMatrix")
hybrid_p <- Recommender(hybrid_r_rrm, method="UBCF", param=list(method="cosine", nn=50))
hybrid_p <- predict(hybrid_p, getData(e, "known"), type="ratings")
cascade_r_rrm <- as(as(ub_p, "matrix"), "realRatingMatrix")
cascade_r <- Recommender(cascade_r_rrm, method="IBCF", param=list(method="cosine", nn=50))
cascade_p <- predict(cascade_r, getData(e, "known"), type="ratings")
error <- rbind(
POPULAR = calcPredictionAccuracy(p_p, getData(e, "unknown")),
ib = calcPredictionAccuracy(ib_p, getData(e, "unknown")),
#svd = calcPredictionAccuracy(svd_p, getData(e, "unknown")),
hybrid = calcPredictionAccuracy(hybrid_p, getData(e, "unknown")),
CASCADE = calcPredictionAccuracy(cascade_p, getData(e, "unknown"))
)
error
?evaluate()
?evaluate
####### no use ################################################################
# Evaluation of a top-N recommender using the cascade approach
cascade_results <- evaluate(e, method="CASCADE", type = "topNList", n=c(1,3,5,10,15,20))
# Run App
shinyApp(ui = ui, server = server)
######################################################################################
# here we have all the different methods
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
# We create a recommender which generates recommendations solely on the popularity of items (songs)
p_rr <- Recommender(r[1:600], method = "POPULAR")
ib_rr <- Recommender(r[1:600], method = "IBCF")
